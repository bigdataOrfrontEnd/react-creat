"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.proxyHandle = void 0;
var url_1 = __importDefault(require("url"));
var http_proxy_1 = __importDefault(require("http-proxy"));
var safe_1 = __importDefault(require("colors-cli/safe"));
function proxyHandle(req, res, options, proxyKey) {
    if (options === void 0) { options = {}; }
    var currentProxy = options.proxy[proxyKey];
    var url = url_1.default.parse(currentProxy);
    if (options.changeHost) {
        req.headers.host = url.host;
    }
    var _a = options.httpProxy, _b = _a.options, proxyOptions = _b === void 0 ? {} : _b, _c = _a.listeners, proxyListeners = _c === void 0 ? {} : _c;
    /**
     * rewrite target's url path. Object-keys will be used as RegExp to match paths.
     * https://github.com/jaywcjlove/mocker-api/issues/62
     */
    Object.keys(options.pathRewrite).forEach(function (rgxStr) {
        var rePath = req.path.replace(new RegExp(rgxStr), options.pathRewrite[rgxStr]);
        var currentPath = [rePath];
        if (req.url.indexOf('?') > 0) {
            currentPath.push(req.url.replace(/(.*)\?/, ''));
        }
        req.query = url_1.default.parse(req.url, true).query;
        req.url = req.originalUrl = currentPath.join('?');
    });
    var proxyHTTP = http_proxy_1.default.createProxyServer({});
    proxyHTTP.on('error', function (err) {
        console.error("".concat(safe_1.default.red_b.black(" Proxy Failed: ".concat(err.name)), " ").concat(err.message || '', " ").concat(err.stack || '', " !!"));
    });
    Object.keys(proxyListeners).forEach(function (event) {
        proxyHTTP.on(event, proxyListeners[event]);
    });
    proxyHTTP.web(req, res, Object.assign({ target: url.href }, proxyOptions));
}
exports.proxyHandle = proxyHandle;
//# sourceMappingURL=proxyHandle.js.map