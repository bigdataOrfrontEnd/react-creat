#!/usr/bin/env node
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var fs_1 = require("fs");
var prepareUrls_1 = __importDefault(require("local-ip-url/prepareUrls"));
var detect_port_1 = __importDefault(require("detect-port"));
var safe_1 = __importDefault(require("colors-cli/safe"));
var express_1 = __importDefault(require("express"));
var minimist_1 = __importDefault(require("minimist"));
var __1 = __importDefault(require("../"));
var CWD = process.cwd();
var PKG_PATH = path_1.default.resolve(CWD, './package.json');
var DEFAULT_MOCKER_CONFIG_PATH = path_1.default.resolve(CWD, './mocker.config.json');
var DEFAULT_MOCK_PATH = ['./mock'];
var DEFAULT_CONFIG = {
    host: '0.0.0.0',
    port: 3721
};
(function () { return __awaiter(void 0, void 0, void 0, function () {
    var argvs, version, paths, entryFiles, mockConfigPath, mockerConfig, _a, pkgConf, DEFAULT_PORT, DEFAULT_HOST, app;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                argvs = (0, minimist_1.default)(process.argv.slice(2));
                if (argvs.h || argvs.help) {
                    console.log('\n  Usage: mocker <path> [--config] [--help|h]');
                    console.log('\n  Displays help information.');
                    console.log('\n  Options:');
                    console.log('    --config <path>', 'Simple configuration');
                    console.log('\n  Example:');
                    console.log('    mocker mock/index.js');
                    console.log('    mocker mock/index.js --port 7788');
                    console.log('    mocker mock/index.js --host 0.0.0.0');
                    console.log('    mocker mock/m1.js test/m2.js');
                    console.log('    mocker mock/m1.js --config mocker.config.json');
                    console.log('\n');
                    return [2 /*return*/];
                }
                version = require('../../package.json').version;
                if (argvs.v || argvs.version) {
                    console.log(version);
                    return [2 /*return*/];
                }
                paths = argvs['_'];
                if (paths.length === 0) {
                    console.log(safe_1.default.red('Error: Need to pass parameters!'));
                    console.log("E.g: ".concat(safe_1.default.yellow('mocker <File path>'), "\n"));
                    return [2 /*return*/];
                }
                entryFiles = paths || DEFAULT_MOCK_PATH;
                mockConfigPath = argvs.config || DEFAULT_MOCKER_CONFIG_PATH;
                mockerConfig = DEFAULT_CONFIG;
                if (argvs.config) {
                    mockConfigPath = argvs.config;
                }
                if (!!(0, fs_1.existsSync)(path_1.default.resolve(mockConfigPath))) return [3 /*break*/, 2];
                mockerConfig.host = process.env.HOST ? process.env.HOST : mockerConfig.host;
                _a = mockerConfig;
                return [4 /*yield*/, (0, detect_port_1.default)(mockerConfig.port)];
            case 1:
                _a.port = _b.sent();
                return [3 /*break*/, 3];
            case 2:
                mockerConfig = require(path_1.default.resolve(mockConfigPath));
                _b.label = 3;
            case 3:
                /**
                 * Support setting configuration on package.json
                 * https://github.com/jaywcjlove/mocker-api/issues/144
                 */
                if ((0, fs_1.existsSync)(PKG_PATH)) {
                    pkgConf = require(PKG_PATH);
                    if (pkgConf.mocker) {
                        Object.assign(mockerConfig, pkgConf.mocker);
                    }
                }
                if (argvs.host) {
                    mockerConfig.host = argvs.host;
                }
                if (argvs.port) {
                    mockerConfig.port = argvs.port;
                }
                DEFAULT_PORT = mockerConfig.port;
                DEFAULT_HOST = mockerConfig.host;
                app = (0, express_1.default)();
                app.all('/*', function (req, res, next) {
                    console.log("".concat(safe_1.default.green(req.method), " - ").concat(req.url));
                    res.header('Access-Control-Allow-Origin', '*');
                    res.header('Access-Control-Allow-Headers', 'Content-Type,Content-Length,Authorization,Accept,X-Requested-With');
                    res.header('Access-Control-Allow-Methods', 'PUT,POST,GET,DELETE,OPTIONS');
                    next();
                });
                delete mockerConfig.port;
                delete mockerConfig.host;
                (0, __1.default)(app, entryFiles, __assign({}, mockerConfig));
                app.listen(DEFAULT_PORT, function () {
                    var localIpUrl = (0, prepareUrls_1.default)({
                        protocol: 'http',
                        host: DEFAULT_HOST,
                        port: DEFAULT_PORT,
                    });
                    console.log("> Server Listening at Local: ".concat(safe_1.default.green(localIpUrl.localUrl)));
                    console.log(">           On Your Network: ".concat(safe_1.default.green(localIpUrl.lanUrl), "\n"));
                });
                /**
                 * Event listener for HTTP server "error" event.
                 */
                app.on('error', function (error) {
                    if (error.syscall !== 'listen') {
                        throw error;
                    }
                    var bind = typeof DEFAULT_PORT === 'string' ? "Pipe ".concat(DEFAULT_PORT) : "Port ".concat(DEFAULT_PORT);
                    // handle specific listen errors with friendly messages
                    switch (error.code) {
                        case 'EACCES':
                            console.error("".concat(bind, " requires elevated privileges")); // eslint-disable-line
                            process.exit(1);
                            break;
                        case 'EADDRINUSE':
                            console.error("".concat(bind, " is already in use")); // eslint-disable-line
                            process.exit(1);
                            break;
                        default:
                            throw error;
                    }
                });
                return [2 /*return*/];
        }
    });
}); })();
//# sourceMappingURL=mocker.js.map